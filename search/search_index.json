{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A New Standard for Our Documentation","text":"<p>This presentation demonstrates the high-quality, professional standard now achievable for all company technical manuals through Project Unidoc.</p> <p>TEST</p> <p></p> <p>The core of this new standard is delivering documentation that is not only accurate and easy to maintain, but also highly accessible and user-friendly.</p>"},{"location":"#live-demonstration-the-modern-web-based-manual","title":"Live Demonstration: The Modern Web-Based Manual","text":"<p>As the first step, we'll look at the live, searchable website version of our software manual.</p> <p>Key Features to Notice:</p> <ul> <li>Instant Access: The site is fast, responsive, and works in any modern browser.</li> <li>Powerful Search: The entire manual is indexed for instant, accurate search results, making it incredibly easy for users to find the information they need.</li> <li>Always Up-to-Date: Because this site is built automatically from our central source, it is guaranteed to always reflect the latest approved information.</li> <li>Future-Ready: The same system that builds this website can also package it into a standalone desktop app for offline use by our service engineers in the future.</li> </ul>"},{"location":"demo/","title":"Live Demonstration &amp; Next Steps","text":"<p>This section will demonstrate the core workflow that makes the Project Unidoc system so powerful: enabling a non-technical user to safely contribute a change that is then automatically published.</p>"},{"location":"demo/#live-demo-workflow","title":"Live Demo Workflow","text":"<ol> <li> <p>Showcase Final PDF: First, we'll look at a professionally formatted PDF generated by the system's LaTeX pipeline.</p> </li> <li> <p>Edit as a Team Leader: Using the Decap CMS web interface, I will assume the role of a Team Leader and make a simple, visible change to a manual.</p> </li> <li> <p>Review as Technical Owner: I will switch back to my role, showing the automatically created Pull Request in GitHub. This is the critical quality control gate.</p> </li> <li> <p>Trigger Automation: By approving and merging the change, the automated GitHub Actions workflow will begin.</p> </li> <li> <p>Observe Automation: We will watch the workflow run in real-time, building and deploying the outputs.</p> </li> </ol>"},{"location":"demo/#the-path-forward","title":"The Path Forward","text":"<p>While the automation runs, we can discuss the next steps.</p> <p>The process you are seeing demonstrates a superior, safer, and more efficient workflow that directly addresses the problems of the old system.</p> <p>My recommendation is to formally adopt the Project Unidoc system as the standard process for all new and updated technical documentation company-wide.</p>"},{"location":"problem/","title":"Solving Our Core Documentation Challenges","text":"<p>\"Project Unidoc\" was designed to solve specific, long-standing problems with the previous documentation process. The old workflow, while familiar, created significant inefficiencies and quality control issues.</p>"},{"location":"problem/#key-problems-with-the-old-way","title":"Key Problems with the \"Old Way\"","text":"<ul> <li> <p>No Single Source of Truth</p> <ul> <li>Scattered Word documents and PDFs on a shared drive led to constant version confusion. It was difficult to know which file was the latest, \"official\" version.</li> </ul> </li> <li> <p>Inefficient &amp; Error-Prone Workflow</p> <ul> <li>The process relied on manual copy-pasting of content between documents, which was time-consuming and a frequent source of human error.</li> </ul> </li> <li> <p>Lack of Version Control</p> <ul> <li>There was no reliable way to track changes, review a document's history, or revert to a previous good state if a mistake was made.</li> </ul> </li> <li> <p>Inconsistent Quality &amp; Branding</p> <ul> <li>Formatting, branding, and style varied significantly between documents, appearing unprofessional to clients and confusing for internal users.</li> </ul> </li> <li> <p>No Safe Contribution Pathway</p> <ul> <li>The old system provided no safe or structured way for subject matter experts to contribute directly. The new system's review workflow (Pull Requests) acts as a crucial quality gate, enabling anyone---from team leaders to other engineers---to propose changes without risk, eliminating bottlenecks and encouraging collaboration.</li> </ul> </li> </ul>"},{"location":"solution/","title":"The Solution: Project Unidoc","text":"<p>Project Unidoc transforms documentation from a burden into a strategic asset through automated, scalable workflows that eliminate manual processes while ensuring consistency and quality.</p>"},{"location":"solution/#core-solution-architecture","title":"Core Solution Architecture","text":"<p>The 3-Step Manual Creation Process: 1. Write - Content creators focus purely on writing in Markdown 2. Review - Automated pull request workflow ensures quality control 3. Publish - Simultaneous generation of website and print-ready PDF</p> <p>This streamlined process reduces manual creation time from weeks to hours.</p>"},{"location":"solution/#technical-infrastructure","title":"Technical Infrastructure","text":"<p>The system leverages modern CI/CD principles with Git as the single source of truth, automated builds, and multiple output formats from unified source content.</p>"},{"location":"solution/#scaling-the-system-enterprise-capabilities","title":"Scaling the System: Enterprise Capabilities","text":""},{"location":"solution/#multi-manual-management-at-scale","title":"Multi-Manual Management at Scale","text":"<p>Project Unidoc is architected to handle enterprise-scale documentation requirements:</p> <ul> <li>Centralized Content Repository: Single Git repository manages unlimited manuals with shared components</li> <li>Template-Driven Architecture: Consistent styling and structure across all documentation outputs</li> <li>Automated Cross-References: Dynamic linking between related manuals and sections</li> <li>Version Management: Git-based versioning ensures historical tracking and rollback capabilities</li> </ul>"},{"location":"solution/#team-collaboration-workflows","title":"Team Collaboration Workflows","text":"<p>Distributed Authoring Model: - Technical teams contribute directly via Git commits - Subject matter experts use web-based CMS interface - All changes flow through unified review and approval process - Conflict resolution built into the workflow</p> <p>Quality Assurance Integration: - Automated style and consistency checking - Link validation across all documents - Spelling and grammar verification - Technical accuracy reviews through pull request workflow</p>"},{"location":"solution/#enterprise-grade-scalability-features","title":"Enterprise-Grade Scalability Features","text":"<p>Content Reuse and Modularity: - Shared component library across all manuals - Dynamic content inclusion and templating - Automated generation of custom manual variants - Conditional content based on product configurations</p> <p>Multi-Format Publishing Pipeline: - Simultaneous generation of web, PDF, and mobile-optimized formats - Custom branding and styling per manual or product line - Integration-ready HTML output for embedding in applications - Print-ready PDF with professional typography and layout</p> <p>Operational Excellence: - Automated backup and disaster recovery - Performance monitoring and optimization - Scalable hosting infrastructure - Integration with enterprise authentication systems</p>"},{"location":"solution/#strategic-business-value","title":"Strategic Business Value","text":""},{"location":"solution/#immediate-impact","title":"Immediate Impact","text":"<ul> <li>Zero formatting inconsistencies across all outputs</li> <li>Elimination of version control errors through single source of truth</li> </ul>"},{"location":"solution/#long-term-scalability-benefits","title":"Long-Term Scalability Benefits","text":"<ul> <li>Infinite manual capacity without proportional resource increases</li> <li>Automated custom manual generation for specific product configurations</li> <li>Enterprise application integration capabilities for embedded documentation</li> </ul> <p>This solution transforms documentation from a cost center into a competitive advantage through systematic automation and scalable architecture.</p>"},{"location":"structure/","title":"Project Structure Guide","text":"<p>This document outlines the repository's folder structure and the component-based authoring model used by Project Unidoc. Adhering to this structure is critical for ensuring the automation pipelines function correctly.</p>"},{"location":"structure/#1-high-level-repository-structure","title":"1. High-Level Repository Structure","text":"<p>The repository is organized to clearly separate source content, configuration, automation workflows, and final outputs.</p> <pre><code>.\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 build-and-deploy.yml\n\u2502       \u2514\u2500\u2500 ci.yml\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 admin/\n\u2502   \u2502   \u251c\u2500\u2500 config.yml\n\u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u2514\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 includes/\n\u2502   \u251c\u2500\u2500 parts/\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 site/\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 template.latex\n</code></pre> <ul> <li><code>.github/workflows/</code>: Contains the CI/CD automation scripts.</li> <li><code>docs/</code>: This is the heart of the documentation, containing all source Markdown files and assets.</li> <li><code>docs/admin/</code>: Holds the configuration for the Decap CMS web editor.</li> <li><code>site/</code>: This directory is automatically generated by MkDocs during the build process and is ignored by Git.</li> <li><code>tests/</code>: Contains integration and unit tests for verifying the system's integrity.</li> <li><code>mkdocs.yml</code>: The primary configuration file for the MkDocs static site generator.</li> <li><code>requirements.txt</code>: Lists the Python dependencies required for the project.</li> <li><code>template.latex</code>: The master LaTeX template that defines the style and structure of all generated PDF documents.</li> </ul>"},{"location":"structure/#2-component-based-authoring-model","title":"2. Component-Based Authoring Model","text":"<p>To adhere to the DRY (Don't Repeat Yourself) principle, our manuals are not written as single, monolithic files. Instead, they are assembled from smaller, reusable components.</p>"},{"location":"structure/#types-of-content-files","title":"Types of Content Files","text":"<ol> <li> <p>Master Assembly Files (<code>docs/manual-*.md</code>)</p> <ul> <li>Purpose: These are the master files for a complete manual. Their main job is to define the structure of a manual and include the other components in the correct order. This architecture enables infinite scalability - adding new manuals requires only creating new assembly files that reference existing or new components.</li> <li>Scalability Benefits:<ul> <li>Template-driven consistency: All manuals inherit the same professional structure</li> <li>Component reuse: Common sections (safety, maintenance, contact info) are written once, used everywhere</li> <li>Zero-effort standardization: New products automatically follow established documentation patterns</li> <li>Automated cross-manual updates: Changes to shared components propagate instantly across all manuals</li> </ul> </li> <li>Example (<code>docs/manual-pekos-v2.md</code>): <pre><code># Pekos V2 Clamping System Manual\n\n{!includes/standard-safety-warnings.md!}\n{!parts/pekos-v2-introduction.md!}\n{!parts/pekos-v2-installation.md!}\n{!includes/standard-maintenance-schedule.md!}\n</code></pre></li> </ul> </li> <li> <p>Unique Part Files (<code>docs/parts/</code>)</p> <ul> <li>Purpose: This directory holds content that is unique to a specific machine or component. These are the substantial chapters of a manual.</li> <li>Examples: <code>pekos-v2-installation.md</code>, <code>crs10-software-guide.md</code>.</li> </ul> </li> <li> <p>Reusable Include Files (<code>docs/includes/</code>)</p> <ul> <li>Purpose: This directory is for \"Lego bricks\"\u2014small, persistent snippets of content that are identical across multiple manuals.</li> <li>Examples: <code>standard-safety-warnings.md</code>, <code>company-contact-info.md</code>.</li> </ul> </li> </ol>"},{"location":"structure/#how-it-comes-together","title":"How It Comes Together","text":"<p>The build process is configured to understand this include syntax. When it builds a manual, it starts with the Master Assembly File, reads the list of includes, and stitches them together into a single, complete document before converting it to its final format.</p>"}]}