name: Build Docs and Generate PDFs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure Git for deployment
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Assemble manuals from components
        run: |
          # Run Python assembly script
          python assemble.py

      - name: Quality Gate - Spell Check
        uses: streetsidesoftware/cspell-action@v6
        with:
          files: |
            docs/**/*.md
            assembled/**/*.md
          config: .cspell.json
          strict: true

      - name: Quality Gate - Link Check
        uses: lycheeverse/lychee-action@v1.10.0
        with:
          args: --verbose --no-progress 'docs/**/*.md' 'assembled/**/*.md'
          fail: true

      - name: Build website for Netlify
        run: |
          # Build the MkDocs site (Netlify will handle deployment)
          mkdocs build --verbose

  generate-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Pandoc and LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex texlive-fonts-recommended texlive-plain-generic

      - name: Assemble manuals from components
        run: |
          # Run Python assembly script
          python assemble.py

      - name: Generate PDFs from assembled manuals
        run: |
          # Generate PDF for each assembled manual
          for manual_file in assembled/*.md; do
            if [ -f "$manual_file" ]; then
              manual_name=$(basename "$manual_file" .md)
              echo "Generating PDF for: $manual_name"
              
              pandoc "$manual_file" \
                --pdf-engine=xelatex \
                --variable=title:"$(grep '^title:' "$manual_file" | sed 's/title: *//' | tr -d '"')" \
                --variable=author:"$(grep '^author:' "$manual_file" | sed 's/author: *//' | tr -d '"')" \
                --variable=date:"$(grep '^date:' "$manual_file" | sed 's/date: *//' | tr -d '"')" \
                --toc \
                --number-sections \
                --highlight-style=pygments \
                -o "${manual_name}.pdf"
              
              echo "âœ“ Generated: ${manual_name}.pdf"
            fi
          done
          
          # List generated PDFs
          ls -la *.pdf

      - name: Upload PDF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdfs
          path: |
            *.pdf
          retention-days: 30

      - name: Upload PDFs to release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.pdf